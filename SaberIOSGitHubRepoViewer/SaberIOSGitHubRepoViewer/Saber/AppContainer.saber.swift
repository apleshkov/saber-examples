// Generated by Saber 0.2.1

// swiftlint:disable all

import Foundation

internal class AppContainer: AppContaining {

    internal let gitHub: GitHub

    private var cached_loggerProvider: LoggerProvider?

    private var cached_networkSessionManager: NetworkSessionManager?

    internal init(gitHub: GitHub) {
        self.gitHub = gitHub
    }

    internal var loggerProvider: LoggerProvider {
        if let cached = self.cached_loggerProvider { return cached }
        let loggerProvider = self.makeLoggerProvider()
        self.cached_loggerProvider = loggerProvider
        return loggerProvider
    }

    internal var appCoordinator: AppCoordinator {
        let appCoordinator = self.makeAppCoordinator()
        self.injectTo(appCoordinator: appCoordinator)
        return appCoordinator
    }

    internal var repoCoordinator: RepoCoordinator {
        let repoCoordinator = self.makeRepoCoordinator()
        self.injectTo(repoCoordinator: repoCoordinator)
        return repoCoordinator
    }

    internal var networkSessionManager: NetworkSessionManager {
        if let cached = self.cached_networkSessionManager { return cached }
        let networkSessionManager = self.makeNetworkSessionManager()
        self.cached_networkSessionManager = networkSessionManager
        return networkSessionManager
    }

    internal var logging: Logging? {
        let logging = self.makeLogging()
        return logging
    }

    private func makeLoggerProvider() -> LoggerProvider {
        return LoggerProvider()
    }

    private func makeAppCoordinator() -> AppCoordinator {
        return AppCoordinator(appContainer: self)
    }

    private func makeRepoCoordinator() -> RepoCoordinator {
        return RepoCoordinator(appContainer: self)
    }

    private func makeNetworkSessionManager() -> NetworkSessionManager {
        return NetworkSessionManager(gitHub: self.gitHub)
    }

    private func makeLogging() -> Logging? {
        let provider = self.loggerProvider
        return provider.provide()
    }

    private func injectTo(appCoordinator: AppCoordinator) {
        appCoordinator.logger = self.logging
    }

    private func injectTo(repoCoordinator: RepoCoordinator) {
        repoCoordinator.logger = self.logging
    }

}